/*
 * Copyright (C) 2016 Intelligent Information Systems Group.
 *
 * This file is part of AgE.
 *
 * AgE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AgE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AgE.  If not, see <http://www.gnu.org/licenses/>.
 */

package pl.edu.agh.age.compute.stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javaslang.collection.List;
import javaslang.collection.Map;
import javaslang.collection.Set;

/**
 * Environment passed to the step function.
 */
public final class Environment {

	private static final Logger logger = LoggerFactory.getLogger(Environment.class);

	private final long id;

	private final Manager manager;

	Environment(final long id, final Manager manager) {
		this.id = id;
		this.manager = manager;
	}

	public long workplaceId() {
		return id;
	}

	/**
	 * Returns the count of all workplaces (global, distributed).
	 */
	public long workplacesCount() {
		return workplaceStatistics().length();
	}

	/**
	 * Returns workplaces in the neighbourhood.
	 *
	 * Neighbourhood is defined by the configured topology.
	 *
	 * @see pl.edu.agh.age.compute.api.topology.Topology
	 *
	 * @return a map, where keys are ids of workplaces in the neighbourhood and values are their annotations generated by the topology
	 */
	public Map<Long, Set<String>> neighbours() {
		return manager.getNeighboursOf(id);
	}

	/**
	 * Returns a read-only view of statistics map generated by {@link AfterStepAction}.
	 */
	public Map<Long, Map<Object, Object>> workplaceStatistics() {
		return manager.getStatistics();
	}

	/**
	 * Returns a read-only view of statistics map generated by {@link AfterStepAction} only for neighbours.
	 */
	public Map<Long, Map<Object, Object>> neighboursStatistics() {
		return manager.getNeighboursStatistics(id);
	}

	/**
	 * Migrates an agent to a workplace with the given id in neighbourhood.
	 */
	public void migrate(final Agent agent, final long targetWorkplaceId) {
		logger.debug("[W{}] Migrating {} to {}", id, agent, targetWorkplaceId);
		manager.migrate(agent, id, targetWorkplaceId);
	}

	/**
	 * Migrates an agent to a workplace with the given annotation in neighbourhood.
	 */
	public void migrate(final Agent agent, final String targetWorkplaceAnnotation) {
		logger.debug("[W{}] Migrating {} to {}", id, agent, targetWorkplaceAnnotation);
		manager.migrate(agent, id, targetWorkplaceAnnotation);
	}

	/**
	 * Logs provided population fragment.
	 *
	 * @param type
	 * 		name of the population fragment (e.g. "dead")
	 * @param population
	 * 		population to log.
	 */
	public void logPopulation(final String type, final List<? extends Agent> population) {
		logger.debug("[W{}] Logging <{}> for {}", id, type, population);
		// TODO
	}
}
