<?xml version="1.0" encoding="UTF-8"?><!--
  ~ Copyright (C) 2016 Intelligent Information Systems Group.
  ~
  ~ This file is part of AgE.
  ~
  ~ AgE is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ AgE is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with AgE.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Required to process annotations -->
	<context:annotation-config/>

	<!-- Define a timed stop condition that fires after 10 s -->
	<bean id="stop-condition" class="pl.edu.agh.age.compute.stream.TimedStopCondition">
		<constructor-arg value="10" type="long"/>
	</bean>

	<!-- Define a step function for workplaces -->
	<bean id="step" class="pl.edu.agh.age.compute.stream.example.SampleStep"/>

	<!-- Define problem definition -->
	<bean id="problemDefinition" class="pl.edu.agh.age.compute.stream.example.SampleProblem"/>
	<bean id="loggingInterval" class="java.time.Duration" factory-method="ofMillis">
		<constructor-arg value="500"/>
	</bean>

	<!-- Define logging parameters -->
	<bean id="loggingParameters" class="pl.edu.agh.age.compute.stream.logging.LoggingParameters">
		<constructor-arg name="problemDefinition" ref="problemDefinition"/>
		<constructor-arg name="loggingInterval" ref="loggingInterval"/>
	</bean>

	<!-- Logging service -->
	<bean id="loggingService" class="pl.edu.agh.age.compute.stream.logging.DefaultLoggingService"/>

	<bean id="evaluatorCounter" class="pl.edu.agh.age.compute.stream.problem.EvaluatorCounter" factory-method="empty"/>
	<bean id="agentComparator"
	      class="pl.edu.agh.age.compute.stream.emas.EmasAgentComparators"
	      factory-method="higherFitness"/>
	<bean id="agentsRegistry" class="pl.edu.agh.age.compute.stream.emas.EmasBestAgentsRegistry">
		<constructor-arg name="agentComparator" ref="agentComparator"/>
	</bean>

	<!-- Define an after-step analyzer -->
	<bean id="population-analyzer" class="pl.edu.agh.age.compute.stream.example.SampleAfterStepActionWithLogging"/>

	<!-- Define a list of agents for workplaces -->
	<util:list id="agents-jul" value-type="pl.edu.agh.age.compute.stream.emas.EmasAgent">
		<bean class="pl.edu.agh.age.compute.stream.emas.Generators" factory-method="randomAgent"/>
		<bean class="pl.edu.agh.age.compute.stream.emas.Generators" factory-method="randomAgent"/>
		<bean class="pl.edu.agh.age.compute.stream.emas.Generators" factory-method="randomAgent"/>
		<bean class="pl.edu.agh.age.compute.stream.emas.Generators" factory-method="randomAgent"/>
		<bean class="pl.edu.agh.age.compute.stream.emas.Generators" factory-method="randomAgent"/>
	</util:list>

	<!-- Define two workplaces -->
	<bean id="workplace-1" class="pl.edu.agh.age.compute.stream.configuration.WorkplaceConfiguration">
		<constructor-arg ref="step"/>
		<constructor-arg ref="agents-jul"/>
		<constructor-arg ref="population-analyzer"/>
	</bean>
	<bean id="workplace-2" class="pl.edu.agh.age.compute.stream.configuration.WorkplaceConfiguration">
		<constructor-arg ref="step"/>
		<constructor-arg ref="agents-jul"/>
		<constructor-arg ref="population-analyzer"/>
	</bean>
	<util:list id="workplace-configurations"
	           value-type="pl.edu.agh.age.compute.stream.configuration.WorkplaceConfiguration">
		<ref bean="workplace-1"/>
		<ref bean="workplace-2"/>
	</util:list>

	<bean id="topology" class="pl.edu.agh.age.compute.api.topology.FullMeshTopology" />

	<!-- Initialize configuration -->
	<bean id="configuration" class="pl.edu.agh.age.compute.stream.configuration.Configuration">
		<constructor-arg name="workplaceConfigurations" ref="workplace-configurations" />
		<constructor-arg name="stopCondition" ref="stop-condition" />
		<constructor-arg name="loggingService" ref="loggingService" />
		<constructor-arg name="topology" ref="topology" />
	</bean>

	<!-- Define main class -->
	<bean id="runnable" class="pl.edu.agh.age.compute.stream.StreamAgents"/>

</beans>
