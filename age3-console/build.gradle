/*
 * Copyright (C) 2016 Intelligent Information Systems Group.
 *
 * This file is part of AgE.
 *
 * AgE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AgE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AgE.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
	id 'application'
	id 'com.github.johnrengelman.shadow' version '2.0.2'
}

mainClassName = 'pl.edu.agh.age.console.ConsoleBootstrapper'
applicationDefaultJvmArgs = [
	'-enableassertions',
]

dependencies {
	compile project(':age3-core')

	compile 'com.hazelcast:hazelcast-client:default'
	compile 'org.jline:jline:+'

	// JNA is needed for jline
	runtime 'net.java.dev.jna:jna:+'
	runtime 'org.fusesource.jansi:jansi:+'
}

shadowJar {
	// Required for merging spring handler definitions (e.g. from Hazelcast)
	mergeServiceFiles('META-INF/spring.*')
}

// Use ProcessBuilder to have a correct tty on Linux
task(shell, dependsOn: 'classes') {
	doLast {
		def classpath = sourceSets.main.runtimeClasspath
		def systemProperties = System.properties.grep { it.key.startsWith('age') }.collect { '-D' + it }.join ' '
		def command = [
			'java',
			'-cp', classpath.collect().join(java.io.File.pathSeparator),
			systemProperties,
			'pl.edu.agh.age.console.ConsoleBootstrapper'
		]
		if (project.hasProperty('appArgs')) {
			command.addAll(Eval.me(appArgs))
		}
		command.removeAll("")
		def proc = new ProcessBuilder(command)
			.redirectOutput(ProcessBuilder.Redirect.INHERIT)
			.redirectInput(ProcessBuilder.Redirect.INHERIT)
			.redirectError(ProcessBuilder.Redirect.INHERIT)
			.start()
		proc.waitFor()
	}
}

task(standalone, dependsOn: 'classes') {
	doLast {
		def classpath = sourceSets.main.runtimeClasspath
		def systemProperties = System.properties.grep { it.key.startsWith('age') }.collect { '-D' + it }.join ' '
		def command = [
			'java',
			'-cp', classpath.collect().join(java.io.File.pathSeparator),
			'pl.edu.agh.age.console.ConsoleBootstrapper',
			systemProperties,
			'standalone'
		]
		if (project.hasProperty('appArgs')) {
			command.addAll(Eval.me(appArgs))
		}
		command.removeAll("")
		def proc = new ProcessBuilder(command)
			.redirectOutput(ProcessBuilder.Redirect.INHERIT)
			.redirectInput(ProcessBuilder.Redirect.INHERIT)
			.redirectError(ProcessBuilder.Redirect.INHERIT)
			.start()
		proc.waitFor()
	}
}
